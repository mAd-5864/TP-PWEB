@page "/categoria/delete"

@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using GestaoLoja.Entities
@using GestaoLoja.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Apagar</PageTitle>

<h1>Apagar registo</h1>

<h3>Tem a certeza de que quer apagar este registo?</h3>
<div>
    <h4>Categoria</h4>
    <hr />
    @if (categoria is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <dl class="row">
            <dd>
                <div>
                    @if (categoria.Imagem is not null)
                    {
                        <img title="@categoria.Nome" id="imagePreview" class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(categoria.Imagem))" style="width:100px">
                    }
                    else
                    {
                        <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:100px;">
                    }
                </div>
            </dd>

            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@categoria.Nome</dd>
        </dl>

        <dl class="row">
            <dt class="col-sm-2">Ordem</dt>
            <dd class="col-sm-10">@categoria.Ordem</dd>
        </dl>
        <EditForm method="post" Model="categoria" OnValidSubmit="DeleteCategoria" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(categoria is null)" onclick="return confirm('Tem a certeza que deseja apagar este registo?')"><img title="Apagar" src="/img/deleteicon.png" style="height:30px" /></button> |
            <a href="/categoria" type="button" class="btn btn-outline-secondary"><img title="Recuar" src="/img/backicon.png" style="height:30px" /></a>
        </EditForm>
    }
</div>

@code {
    Categoria? categoria;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        categoria = await context.Categorias.FirstOrDefaultAsync(m => m.Id == Id);

        if (categoria is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCategoria()
    {
        using var context = DbFactory.CreateDbContext();
        context.Categorias.Remove(categoria!);
        await context.SaveChangesAsync();



        await deleteImage(categoria.Id, categoria.UrlImagem);

        NavigationManager.NavigateTo("/categoria");
    }

    public async Task deleteImage(int id, string image)
    {
        using var context = DbFactory.CreateDbContext();
        var curso = await context.Produtos.FirstOrDefaultAsync(m => m.Id == id);

        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Categorias/" + @categoria.Id + "/" + image);

        try
        {
            System.IO.File.Delete(filePath);
        }
        catch (Exception ex)
        {

        }
    }
}
