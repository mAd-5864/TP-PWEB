@page "/produtos/delete"

@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using GestaoLoja.Entities
@using GestaoLoja.Data
@inject IDbContextFactory<GestaoLoja.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Apagar</PageTitle>

<h1>Apagar Registo</h1>

<h3>Tem a certeza de que quer apagar este registo?</h3>
<div>
    <h4>Produto</h4>
    <hr />
    @if (produto is null)
    {
        <p><em>Carregando...</em></p>
    }
    else {
        <div>
            @if (@produto.Imagem != null && @produto.Imagem.Length > 0)
            {
                <img title="Imagem Actual: @produto.UrlImagem" id="imagePreview" class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(produto.Imagem))" style="width:200px">
            }
            else
            {
                <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:50%;">
            }
        </div>

        <dl class="row">
            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@produto.Nome</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Detalhe</dt>
            <dd class="col-sm-10">@produto.Detalhe</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Origem</dt>
            <dd class="col-sm-10">@produto.Origem</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Preço</dt>
            <dd class="col-sm-10">@produto.Preco</dd>
        </dl>

        <dl class="row">
            <dt class="col-sm-2">Stock</dt>
            <dd class="col-sm-10">@produto.EmStock</dd>
        </dl>


        <dl class="row">
            <dt class="col-sm-2">Categoria</dt>
            <dd class="col-sm-10">@produto.categoria.Nome</dd>
        </dl>
        <EditForm method="post" Model="produto" OnValidSubmit="DeleteProduto" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(produto is null)" onclick="return confirm('Tem a certeza que deseja apagar este registo?')"><img title="Apagar" src="/img/deleteicon.png" style="height:30px" /></button> |
            <a href="/produtos" type="button" class="btn btn-outline-secondary"><img title="Recuar" src="/img/backicon.png" style="height:30px" /></a>
        </EditForm>
    }
</div>

@code {
    Produto? produto;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        produto = await context.Produtos.Include("categoria")
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (produto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteProduto()
    {
        using var context = DbFactory.CreateDbContext();
        context.Produtos.Remove(produto!);
        await context.SaveChangesAsync();

        await deleteImage(produto.Id, produto.UrlImagem);

        NavigationManager.NavigateTo("/produtos");
    }

    public async Task deleteImage(int id, string image)
    {
        using var context = DbFactory.CreateDbContext();
        var curso = await context.Produtos.FirstOrDefaultAsync(m => m.Id == id);

        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Produtos/" + @produto.Id + "/" +image);

        try
        {
            System.IO.File.Delete(filePath);

        }
        catch (Exception ex)
        {

        }

    }
}
