@page "/produtos"

@* @attribute [Authorize(Roles = "Admin")] *@

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using GestaoLoja.Entities
@using GestaoLoja.Data
@using Microsoft.AspNetCore.Identity

@rendermode InteractiveServer

@inject IDbContextFactory<ApplicationDbContext> DbFactory

@implements IAsyncDisposable

<PageTitle>Listagem</PageTitle>

<h1>Listagem de Produtos</h1>

<p><a title="Novo registo!" href="produtos/create"><img src="/img/novo.png" style="height:50px"/></a></p>

<QuickGrid Items="@produtosQueryable" @ref="refgrid" Pagination="@pagination">
    <TemplateColumn Context="produto">
        @if (produto.Imagem is not null)
        {
            <img title="Imagem Actual: @produto.UrlImagem" id="imagePreview" 
            class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(produto.Imagem))" style="width:100px">
        }
        else
        {
            <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:100px;">
        }
    </TemplateColumn>

    <PropertyColumn Property="produto => produto.Nome" Sortable="true" >
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @onchange="PesquisaProduto" placeholder="Produto nome..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="produto => produto.Detalhe" />

    <PropertyColumn Title="Preço" Property="produto => produto.Preco" Sortable="true" />

    <PropertyColumn Title="Stock" Property="produto => produto.EmStock" />

    <PropertyColumn Title="Categoria" Property="produto => produto.categoria.Nome" />


    <TemplateColumn Context="produto">

        <a title="Editar" href="@($"produtos/edit?id={produto.Id}")"><img title="Editar" src="/img/editicon.png" style="height:30px"/></a> 
        <a title="Detalhes" href="@($"produtos/details?id={produto.Id}")"><img title="Detalhes" src="/img/detailsicon.png" style="height:30px"/></a> 
        <a title="Apagar" href="@($"produtos/delete?id={produto.Id}")"><img title="Apagar" src="/img/deleteicon.png" style="height:30px"/></a>
        
    </TemplateColumn>
        
</QuickGrid>
<div class="page-size-chooser"
    Produtos :
    <select @bind="@pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>15</option>
    </select>
</div>
<div class="card-footer"><Paginator State="@pagination" /></div>

@code {

    QuickGrid<Produto>? refgrid;

    //Pagination
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };

    List<Produto> produtosList = new();
    IQueryable<Produto>? produtosQueryable;

    private ApplicationDbContext context = default!;

    protected override async void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        produtosQueryable = Enumerable.Empty<Produto>().AsQueryable();

        CarregaProdutos();
        ConvertListToQueryable();
    }

    private IList<Produto> CarregaProdutos()
    {
        produtosList = context.Produtos
                    .Include("categoria")
                    .Include("modoentrega")
                    .OrderBy(x => x.categoria.Nome)
                    .ThenBy(a => a.Nome)
                    .ToList();
        return produtosList;
    }

    // Load data from List to the Queryable container
    private void ConvertListToQueryable()
    {
        produtosQueryable = Enumerable.Empty<Produto>().AsQueryable();

        if (produtosList is null) return;
        foreach (var produto in produtosList.OrderBy(_ => _.Id))
        {
            produtosQueryable = produtosQueryable.Concat(new[] { produto }.AsQueryable());
        }
     //   pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }

    //Pesquisa Produto
    void PesquisaProduto(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()))
        {
            var result = produtosQueryable.Where(c => c.Nome!.Contains(e.Value!.ToString()!, 
            StringComparison.CurrentCultureIgnoreCase)).ToList();
            produtosQueryable = Enumerable.Empty<Produto>().AsQueryable();
            if (result.Count == 0)
            {
                return;
            }

            if (result.Any())
            {
                foreach (var produto in result.OrderBy(_ => _.Id))
                    produtosQueryable = produtosQueryable.Concat(new[] { produto }.AsQueryable());
            }
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
