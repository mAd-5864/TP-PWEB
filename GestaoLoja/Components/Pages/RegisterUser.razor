@page "/registaruser"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using RCLAPI.DTO
@using RCLAPI.Services

@inject NavigationManager NavigationManager

<PageTitle>Criar Registo de Utilizador</PageTitle>

<h1>Criar Registo de Utilizador WEB</h1>

<h4>Utilizador</h4>
<hr />
        <EditForm method="post" Model="Utilizador" OnValidSubmit="AddUser" 
            enctype="multipart/form-data" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

                <div>
                    @if (@Utilizador.Fotografia != null && @Utilizador.Fotografia.Length > 0)
                    {
                        <img title="@Utilizador.Nome" id="imagePreview" 
                        class="img-thumbnail mt-2" 
                        src="Utilizador\@Utilizador.Fotografia" style="width:100px;">
                    }
                    else
                    {
                        <img id="imagePreview" class="img-thumbnail mt-2" 
                        src="images/headicon.png" 
                        style="width:100px;">
                    }
                </div>
             
                    <label for="imageUri" class="form-label">Imagem:</label>
                    <input id="imageUri"
                           type="file"
                           name="Utilizador.ImageFile"
                           class="form-control"
                           accept=".png, .jpg, .jpeg"
                           onchange="document.getElementById('imagePreview').src = 
                                window.URL.createObjectURL(this.files[0])" />        
                <div class="md-2">
                <label for="nome" class="form-label">Nome:</label> 
                <InputText id="nome" @bind-Value="Utilizador.Nome" class="form-control" />
                <ValidationMessage For="() => Utilizador.Nome" class="text-danger" />
        
                <label for="apelido" class="form-label">Apelido:</label> 
                <InputText id="apelido" @bind-Value="Utilizador.Apelido" class="form-control" />
                <ValidationMessage For="() => Utilizador.Apelido" class="text-danger" />
                 
                </div>     
       
                <label for="email" class="form-label">EMail:</label>
                <InputText id="email" @bind-Value="Utilizador.EMail" class="form-control" />
                <ValidationMessage For="() => Utilizador.EMail" class="text-danger" />
 
                <label for="password" class="form-label">Password:</label> 
                <InputText type="password"  id="password" @bind-Value="Utilizador.Password" class="form-control" />
                <ValidationMessage For="() => Utilizador.Password" class="text-danger" />

@*              <label for="confirmepassword" class="form-label">Confirme a Password:</label> 
                <InputText type="password"  id="confirmepassword" 
                    @bind-Value="Utilizador.ConfirmPassword" class="form-control" />
                <ValidationMessage For="() => Utilizador.ConfirmPassword" class="text-danger" />
 *@
                <label for="nif" class="form-label">NIF:</label> 
                <InputNumber id="nif" @bind-Value="Utilizador.NIF" class="form-control" />
                <ValidationMessage For="() => Utilizador.NIF" class="text-danger" />
                              
            <button type="submit" class="btn btn-primary"><img title="Registar" 
                src="/images/login.png" style="height:30px" /></button>
            <a href="/" type="button" class="btn btn-outline-secondary"><img title="Recuar" 
                src="/images/backicon.png" style="height:30px" /></a>      
        </EditForm>
@code {      
    [SupplyParameterFromForm]
    public Utilizador Utilizador { get; set; } = new();
    [Inject]
    public IApiServices? _apiServices { get; set; }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddUser()
    {
        try
        {
            if (Utilizador.ImageFile != null)
            {
                if (Utilizador.ImageFile.Length > (200 * 1024))
                {
                    NavigationManager.NavigateTo("/registaruser");
                }

                if (!isValidFileType(Utilizador.ImageFile.FileName))
                {
                    NavigationManager.NavigateTo("/registaruser");
                }
                else Utilizador.UrlImagem = Utilizador.ImageFile.FileName;

                using (var dataStream = new MemoryStream())
                {
                    await Utilizador.ImageFile.CopyToAsync(dataStream);
                    Utilizador.Fotografia = dataStream.ToArray();
                }
            }
            var result = await _apiServices.RegistarUtilizador(Utilizador);
        }
        catch (DbUpdateConcurrencyException)
        {
            NavigationManager.NavigateTo("/");
        }
        NavigationManager.NavigateTo("/");
    }
    bool isValidFileType(string fileName)
    {
        string ext = Path.GetExtension(fileName);
        switch (ext.ToLower())
        {
            case ".jpg":
                return true;
            case ".jpeg":
                return true;
            case ".png":
                return true;
            default:
                return false;
        }
    }
}
